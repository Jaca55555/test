
package uz.maroqand.ecology.core.service.integration.eimzo.yt_cryptoauth;

import javax.xml.namespace.QName;
import javax.xml.ws.*;
import java.net.MalformedURLException;
import java.net.URL;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6b21 
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "CryptoAuthService", targetNamespace = "http://v1.cryptoauth.plugin.ss.capi.yt.uz/", wsdlLocation = "http://127.0.0.1:9090/ytcapiss/cryptoauth/v1?wsdl")
public class CryptoAuthService
    extends Service
{

    private final static URL CRYPTOAUTHSERVICE_WSDL_LOCATION;
    private final static WebServiceException CRYPTOAUTHSERVICE_EXCEPTION;
    private final static QName CRYPTOAUTHSERVICE_QNAME = new QName("http://v1.cryptoauth.plugin.ss.capi.yt.uz/", "CryptoAuthService");

    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL("http://127.0.0.1:9090/ytcapiss/cryptoauth/v1?wsdl");
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        CRYPTOAUTHSERVICE_WSDL_LOCATION = url;
        CRYPTOAUTHSERVICE_EXCEPTION = e;
    }

    public CryptoAuthService() {
        super(__getWsdlLocation(), CRYPTOAUTHSERVICE_QNAME);
    }

    public CryptoAuthService(WebServiceFeature... features) {
        super(__getWsdlLocation(), CRYPTOAUTHSERVICE_QNAME, features);
    }

    public CryptoAuthService(URL wsdlLocation) {
        super(wsdlLocation, CRYPTOAUTHSERVICE_QNAME);
    }

    public CryptoAuthService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, CRYPTOAUTHSERVICE_QNAME, features);
    }

    public CryptoAuthService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public CryptoAuthService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns CryptoAuth
     */
    @WebEndpoint(name = "CryptoAuthPort")
    public CryptoAuth getCryptoAuthPort() {
        return super.getPort(new QName("http://v1.cryptoauth.plugin.ss.capi.yt.uz/", "CryptoAuthPort"), CryptoAuth.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CryptoAuth
     */
    @WebEndpoint(name = "CryptoAuthPort")
    public CryptoAuth getCryptoAuthPort(WebServiceFeature... features) {
        return super.getPort(new QName("http://v1.cryptoauth.plugin.ss.capi.yt.uz/", "CryptoAuthPort"), CryptoAuth.class, features);
    }

    private static URL __getWsdlLocation() {
        if (CRYPTOAUTHSERVICE_EXCEPTION!= null) {
            throw CRYPTOAUTHSERVICE_EXCEPTION;
        }
        return CRYPTOAUTHSERVICE_WSDL_LOCATION;
    }

}
